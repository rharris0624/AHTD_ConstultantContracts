using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AHTD.Logging
{
	internal static class ExceptionFormatter
	{
		private static readonly string _loggerVersionLine;

		static ExceptionFormatter()
		{
			System.Reflection.AssemblyName assemblyName = System.Reflection.Assembly.GetExecutingAssembly().GetName();

			_loggerVersionLine = String.Format(
				"Generated by AHTD Logging Client Helper ({0}, v{1})",
				assemblyName.Name,
				assemblyName.Version);
		}

		internal static string FormatExceptionMessage(Exception ex, bool unhandled, IEnumerable<KeyValuePair<string, string>> additionalInfo)
		{
			StringBuilder message = new StringBuilder();

			message.Append(FormatterUtil.GetMessageHeader(ex, unhandled));
			message.Append(FormatterUtil.GetExceptionDetails(ex));
			message.Append(GetMessageFooter(additionalInfo));

			return message.ToString();
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands", Justification = "Method does not expose anything sensitive to callers")]
		private static string GetMessageFooter(IEnumerable<KeyValuePair<string, string>> additionalInfo)
		{
			StringBuilder message = new StringBuilder();

			var process = System.Diagnostics.Process.GetCurrentProcess();
			var thread = System.Threading.Thread.CurrentThread;
			var principal = System.Threading.Thread.CurrentPrincipal;

			string formatStr = "{0,-16}: {1}";

			message.AppendLine();
			message.AppendLine("Additional Info");
			message.AppendLine();
			message.AppendLine(String.Format(formatStr, "MachineName", Environment.MachineName));
			message.AppendLine(String.Format(formatStr, "ProcessId", process.Id));
			message.AppendLine(String.Format(formatStr, "ProcessName", process.ProcessName));
			message.AppendLine(String.Format(formatStr, "ProcessVer", process.MainModule.FileVersionInfo.FileVersion));
			message.AppendLine(String.Format(formatStr, "App Version", process.MainModule.FileVersionInfo.ProductVersion));
			message.AppendLine(String.Format(formatStr, "App Domain", AppDomain.CurrentDomain.FriendlyName));
			message.AppendLine(String.Format(formatStr, "Thread Name", thread.Name));
			message.AppendLine(String.Format(formatStr, "Identity", principal.Identity.Name));

			if (additionalInfo != null)
			{
				foreach (var pair in additionalInfo)
					message.AppendLine(String.Format(formatStr, pair.Key, pair.Value));
			}

			message.AppendLine();
			message.AppendLine(_loggerVersionLine);
			message.AppendLine(FormatterUtil.SeparatorLine);

			return message.ToString();
		}
	}
}
