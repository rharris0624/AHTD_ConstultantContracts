using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Elmah;

namespace AHTD.Logging
{
	internal static class ElmahErrorFormatter
	{
		private static readonly string _loggerVersionLine;

		static ElmahErrorFormatter()
		{
			System.Reflection.AssemblyName assemblyName = System.Reflection.Assembly.GetExecutingAssembly().GetName();

			_loggerVersionLine = String.Format(
				"Generated by AHTD Logging Web Helper ({0}, v{1})",
				assemblyName.Name,
				assemblyName.Version);
		}

		internal static string FormatElmahErrorMessage(Error error, bool unhandled)
		{
			StringBuilder message = new StringBuilder();

			message.Append(FormatterUtil.GetMessageHeader(error.Exception, unhandled));
			message.Append(FormatterUtil.GetExceptionDetails(error.Exception));
			message.Append(GetMessageFooter(error));

			return message.ToString();
		}

		private static string GetMessageFooter(Error error)
		{
			StringBuilder message = new StringBuilder();

			string formatStr = "{0,-16}: {1}";

			message.AppendLine();
			message.AppendLine("Additional Info");
			message.AppendLine();
			message.AppendLine(String.Format(formatStr, "HostName", error.HostName));
			message.AppendLine(String.Format(formatStr, "StatusCode", error.StatusCode));
			message.AppendLine(String.Format(formatStr, "Identity", error.User));

			//string subFormatStr = "    {0,-16}: {1}";

			//if (error.ServerVariables.Count > 0)
			//{
			//    message.AppendLine("ServerVariables");
			//    foreach (string key in error.ServerVariables.AllKeys)
			//        message.AppendLine(String.Format(subFormatStr, key, String.Join(",", error.ServerVariables.GetValues(key))));
			//}
			//if (error.QueryString.Count > 0)
			//{
			//    message.AppendLine("QueryString");
			//    foreach (string key in error.QueryString.AllKeys)
			//        message.AppendLine(String.Format(subFormatStr, key, String.Join(",", error.QueryString.GetValues(key))));
			//}
			//if (error.Form.Count > 0)
			//{
			//    message.AppendLine("Form");
			//    foreach (string key in error.Form.AllKeys)
			//        message.AppendLine(String.Format(subFormatStr, key, String.Join(",", error.Form.GetValues(key))));
			//}
			//if (error.Cookies.Count > 0)
			//{
			//    message.AppendLine("Cookies");
			//    foreach (string key in error.Cookies.AllKeys)
			//        message.AppendLine(String.Format(subFormatStr, key, String.Join(",", error.Cookies.GetValues(key))));
			//}

			message.AppendLine();
			message.AppendLine(_loggerVersionLine);
			message.AppendLine(FormatterUtil.SeparatorLine);

			return message.ToString();
		}
	}
}
